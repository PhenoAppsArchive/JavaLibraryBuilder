/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;

/**
 * AsynchStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-15T17:05:32.234Z[GMT]")public class AsynchStatus {

  @SerializedName("asynchId")
  private String asynchId = null;

  @SerializedName("endTime")
  private LocalDate endTime = null;

  @SerializedName("percentComplete")
  private Integer percentComplete = null;

  @SerializedName("startTime")
  private LocalDate startTime = null;
  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STARTED("STARTED"),
    PENDING("PENDING"),
    FINISHED("FINISHED"),
    ERROR("ERROR");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("status")
  private StatusEnum status = null;
  public AsynchStatus asynchId(String asynchId) {
    this.asynchId = asynchId;
    return this;
  }

  

  /**
  * The unique ID to poll for asynchronous results
  * @return asynchId
  **/
  @Schema(required = true, description = "The unique ID to poll for asynchronous results")
  public String getAsynchId() {
    return asynchId;
  }
  public void setAsynchId(String asynchId) {
    this.asynchId = asynchId;
  }
  public AsynchStatus endTime(LocalDate endTime) {
    this.endTime = endTime;
    return this;
  }

  

  /**
  * Get endTime
  * @return endTime
  **/
  @Schema(description = "")
  public LocalDate getEndTime() {
    return endTime;
  }
  public void setEndTime(LocalDate endTime) {
    this.endTime = endTime;
  }
  public AsynchStatus percentComplete(Integer percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  

  /**
  * Get percentComplete
  * minimum: 0
  * maximum: 100
  * @return percentComplete
  **/
  @Schema(description = "")
  public Integer getPercentComplete() {
    return percentComplete;
  }
  public void setPercentComplete(Integer percentComplete) {
    this.percentComplete = percentComplete;
  }
  public AsynchStatus startTime(LocalDate startTime) {
    this.startTime = startTime;
    return this;
  }

  

  /**
  * Get startTime
  * @return startTime
  **/
  @Schema(description = "")
  public LocalDate getStartTime() {
    return startTime;
  }
  public void setStartTime(LocalDate startTime) {
    this.startTime = startTime;
  }
  public AsynchStatus status(StatusEnum status) {
    this.status = status;
    return this;
  }

  

  /**
  * Get status
  * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsynchStatus asynchStatus = (AsynchStatus) o;
    return Objects.equals(this.asynchId, asynchStatus.asynchId) &&
        Objects.equals(this.endTime, asynchStatus.endTime) &&
        Objects.equals(this.percentComplete, asynchStatus.percentComplete) &&
        Objects.equals(this.startTime, asynchStatus.startTime) &&
        Objects.equals(this.status, asynchStatus.status);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(asynchId, endTime, percentComplete, startTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsynchStatus {\n");
    
    sb.append("    asynchId: ").append(toIndentedString(asynchId)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
